{"ast":null,"code":"var _jsxFileName = \"/home/moringa/Desktop/react/Class-Schedule-React/src/components/pages/Session.js\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport React from 'react';\n\nconst Session = () => {\n  return /*#__PURE__*/React.createElement(FullCalendar, {\n    plugins: [dayGridPlugin],\n    initialView: \"dayGridMonth\",\n    events: events,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  });\n};\n\nconst SCOPES = \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\nconst [events, setEvents] = useState(null);\nuseEffect(() => {\n  const script = document.createElement(\"script\");\n  script.async = true;\n  script.defer = true;\n  script.src = \"https://apis.google.com/js/api.js\";\n  document.body.appendChild(script);\n  script.addEventListener(\"load\", () => {\n    if (window.gapi) handleClientLoad();\n  });\n}, []);\n\nconst handleClientLoad = () => {\n  window.gapi.load(\"client:auth2\", initClient);\n};\n\nconst openSignInPopup = () => {\n  window.gapi.auth2.authorize({\n    client_id: CLIENT_ID,\n    scope: SCOPES\n  }, res => {\n    if (res) {\n      if (res.access_token) localStorage.setItem(\"access_token\", res.access_token); // Load calendar events after authentication\n\n      window.gapi.client.load(\"calendar\", \"v3\", listUpcomingEvents);\n    }\n  });\n};\n\nconst initClient = () => {\n  if (!localStorage.getItem(\"access_token\")) {\n    openSignInPopup();\n  } else {\n    // Get events if access token is found without sign in popup\n    fetch(`https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&orderBy=startTime&singleEvents=true`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`\n      }\n    }).then(res => {\n      // Check if unauthorized status code is return open sign in popup\n      if (res.status !== 401) {\n        return res.json();\n      } else {\n        localStorage.removeItem(\"access_token\");\n        openSignInPopup();\n      }\n    }).then(data => {\n      if (data === null || data === void 0 ? void 0 : data.items) {\n        setEvents(formatEvents(data.items));\n      }\n    });\n  }\n};\n\nconst listUpcomingEvents = () => {\n  window.gapi.client.calendar.events.list({\n    // Fetch events from user's primary calendar\n    calendarId: \"primary\",\n    showDeleted: true,\n    singleEvents: true\n  }).then(function (response) {\n    let events = response.result.items;\n\n    if (events.length > 0) {\n      setEvents(formatEvents(events));\n    }\n  });\n};\n\nconst formatEvents = list => {\n  return list.map(item => ({\n    title: item.summary,\n    start: item.start.dateTime || item.start.date,\n    end: item.end.dateTime || item.end.date\n  }));\n}; // import React, { Component } from 'react';\n// import './Session.css'\n// import { GoogleLogin } from 'react-google-login'\n// import axios from 'axios';\n// import { useState } from 'react'\n// function Session() {\n//   const responseGoogle = response => {\n//     console.log(response)\n//     const { code } = response\n//     axios.post('/api/create-tokens', { code })\n//       .then(response => {\n//         console.log(response.data)\n//         setSignedIn(true)\n//       })\n//       .catch(error => console.log(error.message))\n//   }\n//   const handleSubmit = (e) => {\n//     e.preventDefault()\n//     // console.log(summary, description, location, startDateTime, endDatetime)\n//     axios.post('/api/create-event', {\n//       summary,\n//       description,\n//       location,\n//       startDateTime,\n//       endDatetime,\n//     })\n//     .then(response => {\n//       console.log(response.data)\n//       setSignedIn(true)\n//     })\n//     .catch(error => console.log(error.message))\n//   }\n//   const responseError = error => {\n//     console.log(error)\n//   }\n//   const [summary, setSummary] = useState('')\n//   const [description, setDescription] = useState('')\n//   const [location, setLocation] = useState('')\n//   const [startDateTime, setStartDateTime] = useState('')\n//   const [endDatetime, setEndDateTime] = useState('')\n//   const [signedIn, setSignedIn] = useState(false)\n//   return (\n//       <div>\n//         <div className=\"App\">\n//           <h1>Add Sessions and Events</h1>\n//           </div>\n//               {\n//                 !signedIn ? (\n//                   <div>\n//                   <GoogleLogin \n//                       clientId=\"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//                       buttonText=\"Add sessions and events\"\n//                       onSuccess={responseGoogle}\n//                       onFailure={responseError}\n//                       cookiePolicy={'single_host_origin'}\n//                       responseType=\"code\"\n//                       accessType=\"offline\"\n//                       scope=\"openid email profile https://www.googleapis.com/auth/calendar\"\n//                       />\n//           </div>\n//                 ) : (\n//       <div>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor='summary'>summary</label>\n//         <br />\n//         <input type='text' id='summary' value={summary} onChange={e => setSummary(e.target.value) } />\n//       <br />\n//       <label htmlFor='description'>Description</label>\n//         <br />\n//         <textarea id='description' value={description} onChange={e => setDescription (e.target.value)} />\n//       <br />\n//       <label htmlFor='location'>location</label>\n//         <br />\n//         <input type='text' id='locaion' value={location} onChange={e => setLocation (e.target.value)} />\n//       <br />\n//       <label htmlFor='startDateTime'>Starting at</label>\n//         <br />\n//         <input type='text' id='startdate' value={startDateTime} onChange={e => setStartDateTime} />\n//       <br />\n//       <label htmlFor='endDateTime'>End date</label>\n//         <br />\n//         <input type='datetime-local' id='enddate' value={endDatetime} onChange={e => setEndDateTime} />\n//       <br />\n//       <button type='submit'>Create event</button>\n//       </form>\n//     </div>\n// )\n// }\n// </div>\n// )\n// }\n// export default Session","map":{"version":3,"sources":["/home/moringa/Desktop/react/Class-Schedule-React/src/components/pages/Session.js"],"names":["FullCalendar","dayGridPlugin","React","Session","events","SCOPES","setEvents","useState","useEffect","script","document","createElement","async","defer","src","body","appendChild","addEventListener","window","gapi","handleClientLoad","load","initClient","openSignInPopup","auth2","authorize","client_id","CLIENT_ID","scope","res","access_token","localStorage","setItem","client","listUpcomingEvents","getItem","fetch","API_KEY","headers","Authorization","then","status","json","removeItem","data","items","formatEvents","calendar","list","calendarId","showDeleted","singleEvents","response","result","length","map","item","title","summary","start","dateTime","date","end"],"mappings":"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AA,KAAK,EAAED,IAAI,CAACE,OADa;AAEzBC,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,CAAWC,QAAX,IAAuBJ,IAAI,CAACG,KAAL,CAAWE,IAFhB;AAGzBC,IAAAA,GAAG,EAAEN,IAAI,CAACM,GAAL,CAASF,QAAT,IAAqBJ,IAAI,CAACM,GAAL,CAASD;AAHV,GAAX,CAAT,CAAP;AAKD,CAND,C,CAiBF;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\n\nimport React from 'react'\n\nconst Session = () => {\n  return (\n    <FullCalendar\n      plugins={[dayGridPlugin]}\n      initialView=\"dayGridMonth\"\n      events={events}\n    />\n);\n}\n\n\n\nconst SCOPES =\n  \"https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events https://www.googleapis.com/auth/calendar\";\n\n\n\n\n  const [events, setEvents] = useState(null);\n\n  useEffect(() => {\n    const script = document.createElement(\"script\");\n    script.async = true;\n    script.defer = true;\n    script.src = \"https://apis.google.com/js/api.js\";\n\n    document.body.appendChild(script);\n\n    script.addEventListener(\"load\", () => {\n      if (window.gapi) handleClientLoad();\n    });\n  }, []);\n\n  const handleClientLoad = () => {\n    window.gapi.load(\"client:auth2\", initClient);\n  };\n\n  const openSignInPopup = () => {\n    window.gapi.auth2.authorize(\n               { client_id: CLIENT_ID, scope: SCOPES },\n               (res) => {\n                 if (res) {\n                   if (res.access_token)\n                     localStorage.setItem(\"access_token\", res.access_token);\n \n                   // Load calendar events after authentication\n                   window.gapi.client.load(\"calendar\", \"v3\", listUpcomingEvents);\n                 }\n               }\n             );\n }  \n \n const initClient = () => {\n     if (!localStorage.getItem(\"access_token\")) {\n       openSignInPopup();\n     } else {\n       // Get events if access token is found without sign in popup\n       fetch(\n      `https://www.googleapis.com/calendar/v3/calendars/primary/events?key=${API_KEY}&orderBy=startTime&singleEvents=true`,\n         {\n           headers: {\n             Authorization: `Bearer ${localStorage.getItem(\"access_token\")}`,\n           },\n         }\n       )\n         .then((res) => {\n           // Check if unauthorized status code is return open sign in popup\n           if (res.status !== 401) {\n             return res.json();\n           } else {\n             localStorage.removeItem(\"access_token\");\n \n             openSignInPopup();\n           }\n         })\n         .then((data) => {\n           if (data?.items) {\n             setEvents(formatEvents(data.items));\n           }\n         });\n     }\n   };\n\n   const listUpcomingEvents = () => {\n    window.gapi.client.calendar.events\n      .list({\n        // Fetch events from user's primary calendar\n        calendarId: \"primary\",\n        showDeleted: true,\n        singleEvents: true,\n      })\n      .then(function (response) {\n        let events = response.result.items;\n\n        if (events.length > 0) {\n          setEvents(formatEvents(events));\n        }\n      });\n  };\n\n  const formatEvents = (list) => {\n    return list.map((item) => ({\n      title: item.summary,\n      start: item.start.dateTime || item.start.date,\n      end: item.end.dateTime || item.end.date,\n    }));\n  };\n\n\n\n\n\n\n\n\n\n\n// import React, { Component } from 'react';\n// import './Session.css'\n// import { GoogleLogin } from 'react-google-login'\n// import axios from 'axios';\n// import { useState } from 'react'\n\n\n// function Session() {\n\n//   const responseGoogle = response => {\n//     console.log(response)\n//     const { code } = response\n//     axios.post('/api/create-tokens', { code })\n//       .then(response => {\n//         console.log(response.data)\n//         setSignedIn(true)\n//       })\n//       .catch(error => console.log(error.message))\n//   }\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault()\n\n//     // console.log(summary, description, location, startDateTime, endDatetime)\n//     axios.post('/api/create-event', {\n//       summary,\n//       description,\n//       location,\n//       startDateTime,\n//       endDatetime,\n//     })\n//     .then(response => {\n//       console.log(response.data)\n//       setSignedIn(true)\n//     })\n//     .catch(error => console.log(error.message))\n\n//   }\n  \n\n//   const responseError = error => {\n//     console.log(error)\n//   }\n\n//   const [summary, setSummary] = useState('')\n//   const [description, setDescription] = useState('')\n//   const [location, setLocation] = useState('')\n//   const [startDateTime, setStartDateTime] = useState('')\n//   const [endDatetime, setEndDateTime] = useState('')\n//   const [signedIn, setSignedIn] = useState(false)\n\n//   return (\n//       <div>\n//         <div className=\"App\">\n//           <h1>Add Sessions and Events</h1>\n//           </div>\n\n//               {\n//                 !signedIn ? (\n//                   <div>\n//                   <GoogleLogin \n//                       clientId=\"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//                       buttonText=\"Add sessions and events\"\n//                       onSuccess={responseGoogle}\n//                       onFailure={responseError}\n//                       cookiePolicy={'single_host_origin'}\n    \n//                       responseType=\"code\"\n//                       accessType=\"offline\"\n//                       scope=\"openid email profile https://www.googleapis.com/auth/calendar\"\n//                       />\n//           </div>\n//                 ) : (\n\n//       <div>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor='summary'>summary</label>\n//         <br />\n//         <input type='text' id='summary' value={summary} onChange={e => setSummary(e.target.value) } />\n//       <br />\n\n//       <label htmlFor='description'>Description</label>\n//         <br />\n//         <textarea id='description' value={description} onChange={e => setDescription (e.target.value)} />\n//       <br />\n\n//       <label htmlFor='location'>location</label>\n//         <br />\n//         <input type='text' id='locaion' value={location} onChange={e => setLocation (e.target.value)} />\n//       <br />\n\n//       <label htmlFor='startDateTime'>Starting at</label>\n//         <br />\n//         <input type='text' id='startdate' value={startDateTime} onChange={e => setStartDateTime} />\n//       <br />\n\n//       <label htmlFor='endDateTime'>End date</label>\n//         <br />\n//         <input type='datetime-local' id='enddate' value={endDatetime} onChange={e => setEndDateTime} />\n//       <br />\n//       <button type='submit'>Create event</button>\n//       </form>\n//     </div>\n\n  \n// )\n// }\n// </div>\n// )\n\n// }\n\n// export default Session\n"]},"metadata":{},"sourceType":"module"}