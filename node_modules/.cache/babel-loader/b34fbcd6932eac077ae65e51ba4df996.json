{"ast":null,"code":"import axios from \"axios\";\nimport { STUDENT_USER_LOADED, STUDENT_USER_FAILED, TM_USER_LOADED, TM_USER_FAILED, LOGIN_SUCCESS, LOGIN_FAILED, LOGOUT_SUCCESS, REGISTER_FUSER_SUCCESS, REGISTER_FUSER_FAILED, REGISTER_CUSER_SUCCESS, REGISTER_CUSER_FAILED } from \"../actions/type\"; // export const getStudentUser=()=>(dispatch, getState)=>{\n//     const token=getState().auth.token\n//     const is_student=getState().auth.isStudent\n//     const config={\n//         headers:{\n//             'Content-type':'application/json'\n//         }\n//     }\n//     if(token && is_student){\n//         config.headers['Authorization']=`Token ${token}`  \n//     }\n//     axios.get('https://neapi.herokuapp.com/api/student/dashboard/', config)\n//     .then(res =>{\n//         dispatch({\n//             type:STUDENT_USER_LOADED,\n//             payload:res.data\n//         })\n//     }).catch(err =>{\n//         dispatch({\n//             type:STUDENT_USER_FAILED\n//         })\n//     })\n// }\n// export const getTmUser = ()=>(dispatch, getState)=>{\n//     const token=getState().auth.token;\n//     const is_student=getState().auth.isStudent\n//     const config={\n//         headers:{\n//             'Content-Type':'application/json'\n//         }\n//     }\n//     if(token && !is_student){\n//         config.headers['Authorization']=`Token ${token}`\n//     }\n//     axios.get('https://neapi.herokuapp.com/api/tm/dashboard/', config)\n//       .then(res =>{\n//           dispatch({\n//               type:TM_USER_LOADED,\n//               payload:res.data\n//           })\n//       }).catch(err => {\n//           dispatch({\n//               type:TM_USER_FAILED\n//           })\n//       })\n// }\n\nexport const create_studentuser = _ref => {\n  let {\n    username,\n    email,\n    password,\n    password2\n  } = _ref;\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      email,\n      password,\n      password2\n    });\n    axios.post('https://neapi.herokuapp.com/api/signup/student/', body, config).then(res => {\n      dispatch({\n        type: REGISTER_CUSER_SUCCESS,\n        payload: res.data\n      });\n      console.log(res.data);\n    }).catch(err => {\n      dispatch({\n        type: REGISTER_CUSER_FAILED\n      });\n      console.log(err.response.data);\n    });\n  };\n};\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      username,\n      password\n    });\n    axios.post('https://neapi.herokuapp.com/api/login/', body, config).then(response => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response.data\n      });\n    }).catch(err => {\n      dispatch({\n        type: LOGIN_FAILED\n      });\n    });\n  };\n}; // export const logout=()=>(dispatch, getState)=>{\n//     const token=getState().auth.token\n//     const config={\n//         headers:{\n//             'Content-Type':'application/json'\n//         }\n//     }\n//     if(token){\n//         config.headers['Authorization']= `Token ${token}`\n//     }\n//     axios.post('https://neapi.herokuapp.com/api/logout/', null, config)\n//     .then(res =>{\n//         dispatch({\n//             type:LOGOUT_SUCCESS\n//         })\n//     }).catch(err =>{\n//         console.log(err.response.data)\n//     })\n// }","map":{"version":3,"sources":["/home/moringa/React/Class-Schedule-React/src/actions/auth.js"],"names":["axios","STUDENT_USER_LOADED","STUDENT_USER_FAILED","TM_USER_LOADED","TM_USER_FAILED","LOGIN_SUCCESS","LOGIN_FAILED","LOGOUT_SUCCESS","REGISTER_FUSER_SUCCESS","REGISTER_FUSER_FAILED","REGISTER_CUSER_SUCCESS","REGISTER_CUSER_FAILED","create_studentuser","username","email","password","password2","dispatch","config","headers","body","JSON","stringify","post","then","res","type","payload","data","console","log","catch","err","response","login"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,cAAnD,EACIC,cADJ,EACoBC,aADpB,EACmCC,YADnC,EACgDC,cADhD,EACgEC,sBADhE,EAEIC,qBAFJ,EAE2BC,sBAF3B,EAEmDC,qBAFnD,QAGO,iBAHP,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,kBAAkB,GAAC;AAAA,MAAC;AAACC,IAAAA,QAAD;AAAWC,IAAAA,KAAX;AAAiBC,IAAAA,QAAjB;AAA2BC,IAAAA;AAA3B,GAAD;AAAA,SAA0CC,QAAD,IAAY;AACjF,UAAMC,MAAM,GAAC;AACTC,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX;AADC,KAAb;AAKA,UAAMC,IAAI,GAACC,IAAI,CAACC,SAAL,CAAe;AAACT,MAAAA,QAAD;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA;AAA5B,KAAf,CAAX;AAEAhB,IAAAA,KAAK,CAACuB,IAAN,CAAW,iDAAX,EAA8DH,IAA9D,EAAoEF,MAApE,EACCM,IADD,CACMC,GAAG,IAAG;AACRR,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAChB,sBADA;AAELiB,QAAAA,OAAO,EAACF,GAAG,CAACG;AAFP,OAAD,CAAR;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACG,IAAhB;AACH,KAPD,EAOGG,KAPH,CAOSC,GAAG,IAAG;AACXf,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAACf;AADA,OAAD,CAAR;AAGAkB,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAG,CAACC,QAAJ,CAAaL,IAAzB;AACH,KAZD;AAaH,GArB+B;AAAA,CAAzB;AAyBP,OAAO,MAAMM,KAAK,GAAC;AAAA,MAAC;AAACrB,IAAAA,QAAD;AAAWE,IAAAA;AAAX,GAAD;AAAA,SAAyBE,QAAD,IAAY;AACnD,UAAMC,MAAM,GAAC;AACTC,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX;AADC,KAAb;AAKA,UAAMC,IAAI,GAACC,IAAI,CAACC,SAAL,CAAe;AAACT,MAAAA,QAAD;AAAWE,MAAAA;AAAX,KAAf,CAAX;AAEAf,IAAAA,KAAK,CAACuB,IAAN,CAAW,wCAAX,EAAqDH,IAArD,EAA2DF,MAA3D,EACCM,IADD,CACMS,QAAQ,IAAG;AACbhB,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAACrB,aADA;AAELsB,QAAAA,OAAO,EAACM,QAAQ,CAACL;AAFZ,OAAD,CAAR;AAIH,KAND,EAMGG,KANH,CAMSC,GAAG,IAAG;AACXf,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAACpB;AADA,OAAD,CAAR;AAGH,KAVD;AAYH,GApBkB;AAAA,CAAZ,C,CAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from \"axios\";\nimport { STUDENT_USER_LOADED, STUDENT_USER_FAILED, TM_USER_LOADED,\n    TM_USER_FAILED, LOGIN_SUCCESS, LOGIN_FAILED,LOGOUT_SUCCESS, REGISTER_FUSER_SUCCESS,\n    REGISTER_FUSER_FAILED, REGISTER_CUSER_SUCCESS, REGISTER_CUSER_FAILED\n} from \"../actions/type\"\n\n\n// export const getStudentUser=()=>(dispatch, getState)=>{\n//     const token=getState().auth.token\n//     const is_student=getState().auth.isStudent\n//     const config={\n//         headers:{\n//             'Content-type':'application/json'\n//         }\n//     }\n\n//     if(token && is_student){\n//         config.headers['Authorization']=`Token ${token}`  \n//     }\n//     axios.get('https://neapi.herokuapp.com/api/student/dashboard/', config)\n//     .then(res =>{\n//         dispatch({\n//             type:STUDENT_USER_LOADED,\n//             payload:res.data\n//         })\n//     }).catch(err =>{\n//         dispatch({\n//             type:STUDENT_USER_FAILED\n//         })\n//     })\n// }\n\n\n\n// export const getTmUser = ()=>(dispatch, getState)=>{\n//     const token=getState().auth.token;\n//     const is_student=getState().auth.isStudent\n//     const config={\n//         headers:{\n//             'Content-Type':'application/json'\n//         }\n//     }\n\n//     if(token && !is_student){\n//         config.headers['Authorization']=`Token ${token}`\n//     }\n\n//     axios.get('https://neapi.herokuapp.com/api/tm/dashboard/', config)\n//       .then(res =>{\n//           dispatch({\n//               type:TM_USER_LOADED,\n//               payload:res.data\n//           })\n//       }).catch(err => {\n//           dispatch({\n//               type:TM_USER_FAILED\n//           })\n//       })\n// }\n        \n\nexport const create_studentuser=({username, email,password, password2})=>(dispatch)=>{\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body=JSON.stringify({username, email, password, password2})\n\n    axios.post('https://neapi.herokuapp.com/api/signup/student/', body, config)\n    .then(res =>{\n        dispatch({\n            type:REGISTER_CUSER_SUCCESS,\n            payload:res.data\n        })\n        console.log(res.data)\n    }).catch(err =>{\n        dispatch({\n            type:REGISTER_CUSER_FAILED\n        })\n        console.log(err.response.data)\n    })\n}\n\n\n\nexport const login=({username, password})=>(dispatch)=>{\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    const body=JSON.stringify({username, password})\n\n    axios.post('https://neapi.herokuapp.com/api/login/', body, config)\n    .then(response =>{\n        dispatch({\n            type:LOGIN_SUCCESS,\n            payload:response.data\n        })\n    }).catch(err =>{\n        dispatch({\n            type:LOGIN_FAILED\n        })\n    })\n\n}\n\n\n// export const logout=()=>(dispatch, getState)=>{\n//     const token=getState().auth.token\n//     const config={\n//         headers:{\n//             'Content-Type':'application/json'\n//         }\n//     }\n\n//     if(token){\n//         config.headers['Authorization']= `Token ${token}`\n//     }\n//     axios.post('https://neapi.herokuapp.com/api/logout/', null, config)\n//     .then(res =>{\n//         dispatch({\n//             type:LOGOUT_SUCCESS\n//         })\n//     }).catch(err =>{\n//         console.log(err.response.data)\n//     })\n// }\n"]},"metadata":{},"sourceType":"module"}