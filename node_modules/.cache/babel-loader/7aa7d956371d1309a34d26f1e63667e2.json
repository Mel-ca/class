{"ast":null,"code":"// import React from 'react';\n// // import logo from './logo.svg';\n// import './Session.css';\n// function App() {\n//   var gapi = window.gapi\n//   /* \n//     Update with your own Client Id and Api key \n//   */\n//   var CLIENT_ID = \"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//   var API_KEY = \"AIzaSyBiH7_PQxnILxrGC_I1F8_HA1OgQEiySIU\"\n//   var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]\n//   var SCOPES = \"https://www.googleapis.com/auth/calendar.events\"\n//   const handleClick = () => {\n//     gapi.load('client:auth2', () => {\n//       console.log('loaded client')\n//       gapi.client.init({\n//         apiKey: API_KEY,\n//         clientId: CLIENT_ID,\n//         discoveryDocs: DISCOVERY_DOCS,\n//         scope: SCOPES,\n//       })\n//       gapi.client.load('calendar', 'v3', () => console.log('bam!'))\n//       gapi.auth2.getAuthInstance().signIn()\n//       .then(() => {\n//         var event = {\n//           'summary': 'Awesome Event!',\n//           'location': '800 Howard St., San Francisco, CA 94103',\n//           'description': 'Really great refreshments',\n//           'start': {\n//             'dateTime': '2020-06-28T09:00:00-07:00',\n//             'timeZone': 'America/Los_Angeles'\n//           },\n//           'end': {\n//             'dateTime': '2020-06-28T17:00:00-07:00',\n//             'timeZone': 'America/Los_Angeles'\n//           },\n//           'recurrence': [\n//             'RRULE:FREQ=DAILY;COUNT=2'\n//           ],\n//           'attendees': [\n//             {'email': 'lpage@example.com'},\n//             {'email': 'sbrin@example.com'}\n//           ],\n//           'reminders': {\n//             'useDefault': false,\n//             'overrides': [\n//               {'method': 'email', 'minutes': 24 * 60},\n//               {'method': 'popup', 'minutes': 10}\n//             ]\n//           }\n//         }\n//         var request = gapi.client.calendar.events.insert({\n//           'calendarId': 'primary',\n//           'resource': event,\n//         })\n//         request.execute(event => {\n//           console.log(event)\n//           window.open(event.htmlLink)\n//         })\n//         /*\n//             Uncomment the following block to get events\n//         */\n//         // get events\n//         gapi.client.calendar.events.list({\n//           'calendarId': 'primary',\n//           'timeMin': (new Date()).toISOString(),\n//           'showDeleted': false,\n//           'singleEvents': true,\n//           'maxResults': 10,\n//           'orderBy': 'startTime'\n//         }).then(response => {\n//           const events = response.result.items\n//           console.log('EVENTS: ', events)\n//         })\n//       })\n//     })\n//   }\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n//         <p>Click to add event to Google Calendar</p>\n//         <p style={{fontSize: 18}}>Uncomment the get events code to get events</p>\n//         <p style={{fontSize: 18}}>Don't forget to add your Client Id and Api key</p>\n//         <button style={{width: 100, height: 50}} onClick={handleClick}>Add Event</button>\n//       </header>\n//     </div>\n//   );\n// }\n// export default App;\n// import React, { Component } from 'react';\n// import './Session.css'\n// import { GoogleLogin } from 'react-google-login'\n// import axios from 'axios';\n// import { useState } from 'react'\n// function Session() {\n//   const responseGoogle = response => {\n//     console.log(response)\n//     const { code } = response\n//     axios.post('/api/create-tokens', { code })\n//       .then(response => {\n//         console.log(response.data)\n//         setSignedIn(true)\n//       })\n//       .catch(error => console.log(error.message))\n//   }\n//   const handleSubmit = (e) => {\n//     e.preventDefault()\n//     // console.log(summary, description, location, startDateTime, endDatetime)\n//     axios.post('/api/create-event', {\n//       summary,\n//       description,\n//       location,\n//       startDateTime,\n//       endDatetime,\n//     })\n//     .then(response => {\n//       console.log(response.data)\n//       setSignedIn(true)\n//     })\n//     .catch(error => console.log(error.message))\n//   }\n//   const responseError = error => {\n//     console.log(error)\n//   }\n//   const [summary, setSummary] = useState('')\n//   const [description, setDescription] = useState('')\n//   const [location, setLocation] = useState('')\n//   const [startDateTime, setStartDateTime] = useState('')\n//   const [endDatetime, setEndDateTime] = useState('')\n//   const [signedIn, setSignedIn] = useState(false)\n//   return (\n//       <div>\n//         <div className=\"App\">\n//           <h1>Add Sessions and Events</h1>\n//           </div>\n//               {\n//                 !signedIn ? (\n//                   <div>\n//                   <GoogleLogin \n//                       clientId=\"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//                       buttonText=\"Add sessions and events\"\n//                       onSuccess={responseGoogle}\n//                       onFailure={responseError}\n//                       cookiePolicy={'single_host_origin'}\n//                       responseType=\"code\"\n//                       accessType=\"offline\"\n//                       scope=\"openid email profile https://www.googleapis.com/auth/calendar\"\n//                       />\n//           </div>\n//                 ) : (\n//       <div>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor='summary'>summary</label>\n//         <br />\n//         <input type='text' id='summary' value={summary} onChange={e => setSummary(e.target.value) } />\n//       <br />\n//       <label htmlFor='description'>Description</label>\n//         <br />\n//         <textarea id='description' value={description} onChange={e => setDescription (e.target.value)} />\n//       <br />\n//       <label htmlFor='location'>location</label>\n//         <br />\n//         <input type='text' id='locaion' value={location} onChange={e => setLocation (e.target.value)} />\n//       <br />\n//       <label htmlFor='startDateTime'>Starting at</label>\n//         <br />\n//         <input type='text' id='startdate' value={startDateTime} onChange={e => setStartDateTime} />\n//       <br />\n//       <label htmlFor='endDateTime'>End date</label>\n//         <br />\n//         <input type='datetime-local' id='enddate' value={endDatetime} onChange={e => setEndDateTime} />\n//       <br />\n//       <button type='submit'>Create event</button>\n//       </form>\n//     </div>\n// )\n// }\n// </div>\n// )\n// }\n// export default Session","map":{"version":3,"sources":["/home/moringa/Desktop/react/Class-Schedule-React/src/components/pages/Session.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["// import React from 'react';\n// // import logo from './logo.svg';\n// import './Session.css';\n\n\n// function App() {\n\n//   var gapi = window.gapi\n//   /* \n//     Update with your own Client Id and Api key \n//   */\n//   var CLIENT_ID = \"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//   var API_KEY = \"AIzaSyBiH7_PQxnILxrGC_I1F8_HA1OgQEiySIU\"\n//   var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]\n//   var SCOPES = \"https://www.googleapis.com/auth/calendar.events\"\n\n//   const handleClick = () => {\n//     gapi.load('client:auth2', () => {\n//       console.log('loaded client')\n\n//       gapi.client.init({\n//         apiKey: API_KEY,\n//         clientId: CLIENT_ID,\n//         discoveryDocs: DISCOVERY_DOCS,\n//         scope: SCOPES,\n//       })\n\n//       gapi.client.load('calendar', 'v3', () => console.log('bam!'))\n\n//       gapi.auth2.getAuthInstance().signIn()\n//       .then(() => {\n        \n//         var event = {\n//           'summary': 'Awesome Event!',\n//           'location': '800 Howard St., San Francisco, CA 94103',\n//           'description': 'Really great refreshments',\n//           'start': {\n//             'dateTime': '2020-06-28T09:00:00-07:00',\n//             'timeZone': 'America/Los_Angeles'\n//           },\n//           'end': {\n//             'dateTime': '2020-06-28T17:00:00-07:00',\n//             'timeZone': 'America/Los_Angeles'\n//           },\n//           'recurrence': [\n//             'RRULE:FREQ=DAILY;COUNT=2'\n//           ],\n//           'attendees': [\n//             {'email': 'lpage@example.com'},\n//             {'email': 'sbrin@example.com'}\n//           ],\n//           'reminders': {\n//             'useDefault': false,\n//             'overrides': [\n//               {'method': 'email', 'minutes': 24 * 60},\n//               {'method': 'popup', 'minutes': 10}\n//             ]\n//           }\n//         }\n\n//         var request = gapi.client.calendar.events.insert({\n//           'calendarId': 'primary',\n//           'resource': event,\n//         })\n\n//         request.execute(event => {\n//           console.log(event)\n//           window.open(event.htmlLink)\n//         })\n        \n\n//         /*\n//             Uncomment the following block to get events\n//         */\n        \n//         // get events\n//         gapi.client.calendar.events.list({\n//           'calendarId': 'primary',\n//           'timeMin': (new Date()).toISOString(),\n//           'showDeleted': false,\n//           'singleEvents': true,\n//           'maxResults': 10,\n//           'orderBy': 'startTime'\n//         }).then(response => {\n//           const events = response.result.items\n//           console.log('EVENTS: ', events)\n//         })\n        \n    \n\n//       })\n//     })\n//   }\n\n\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n//         <p>Click to add event to Google Calendar</p>\n//         <p style={{fontSize: 18}}>Uncomment the get events code to get events</p>\n//         <p style={{fontSize: 18}}>Don't forget to add your Client Id and Api key</p>\n//         <button style={{width: 100, height: 50}} onClick={handleClick}>Add Event</button>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n// import React, { Component } from 'react';\n// import './Session.css'\n// import { GoogleLogin } from 'react-google-login'\n// import axios from 'axios';\n// import { useState } from 'react'\n\n\n// function Session() {\n\n//   const responseGoogle = response => {\n//     console.log(response)\n//     const { code } = response\n//     axios.post('/api/create-tokens', { code })\n//       .then(response => {\n//         console.log(response.data)\n//         setSignedIn(true)\n//       })\n//       .catch(error => console.log(error.message))\n//   }\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault()\n\n//     // console.log(summary, description, location, startDateTime, endDatetime)\n//     axios.post('/api/create-event', {\n//       summary,\n//       description,\n//       location,\n//       startDateTime,\n//       endDatetime,\n//     })\n//     .then(response => {\n//       console.log(response.data)\n//       setSignedIn(true)\n//     })\n//     .catch(error => console.log(error.message))\n\n//   }\n  \n\n//   const responseError = error => {\n//     console.log(error)\n//   }\n\n//   const [summary, setSummary] = useState('')\n//   const [description, setDescription] = useState('')\n//   const [location, setLocation] = useState('')\n//   const [startDateTime, setStartDateTime] = useState('')\n//   const [endDatetime, setEndDateTime] = useState('')\n//   const [signedIn, setSignedIn] = useState(false)\n\n//   return (\n//       <div>\n//         <div className=\"App\">\n//           <h1>Add Sessions and Events</h1>\n//           </div>\n\n//               {\n//                 !signedIn ? (\n//                   <div>\n//                   <GoogleLogin \n//                       clientId=\"708105023641-t350k3usoo751tfnilu9hrdokjmmli8v.apps.googleusercontent.com\"\n//                       buttonText=\"Add sessions and events\"\n//                       onSuccess={responseGoogle}\n//                       onFailure={responseError}\n//                       cookiePolicy={'single_host_origin'}\n    \n//                       responseType=\"code\"\n//                       accessType=\"offline\"\n//                       scope=\"openid email profile https://www.googleapis.com/auth/calendar\"\n//                       />\n//           </div>\n//                 ) : (\n\n//       <div>\n//       <form onSubmit={handleSubmit}>\n//         <label htmlFor='summary'>summary</label>\n//         <br />\n//         <input type='text' id='summary' value={summary} onChange={e => setSummary(e.target.value) } />\n//       <br />\n\n//       <label htmlFor='description'>Description</label>\n//         <br />\n//         <textarea id='description' value={description} onChange={e => setDescription (e.target.value)} />\n//       <br />\n\n//       <label htmlFor='location'>location</label>\n//         <br />\n//         <input type='text' id='locaion' value={location} onChange={e => setLocation (e.target.value)} />\n//       <br />\n\n//       <label htmlFor='startDateTime'>Starting at</label>\n//         <br />\n//         <input type='text' id='startdate' value={startDateTime} onChange={e => setStartDateTime} />\n//       <br />\n\n//       <label htmlFor='endDateTime'>End date</label>\n//         <br />\n//         <input type='datetime-local' id='enddate' value={endDatetime} onChange={e => setEndDateTime} />\n//       <br />\n//       <button type='submit'>Create event</button>\n//       </form>\n//     </div>\n\n  \n// )\n// }\n// </div>\n// )\n\n// }\n\n// export default Session\n"]},"metadata":{},"sourceType":"module"}